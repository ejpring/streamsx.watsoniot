<?xml version="1.0" encoding="UTF-8"?><operatorModel xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator" xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/operator operatorModel.xsd">
  <!--DO NOT EDIT THIS FILE - it is machine generated-->
  <javaOperatorModel>
    <!--Generated from com.ibm.streamsx.watsoniot.device.WatsonIoTDeviceSink in impl/java/bin/com/ibm/streamsx/watsoniot/device/WatsonIoTDeviceSink$StreamsModel.class at Fri Jan 19 10:11:30 EST 2018-->
    <context>
      <description>The WatsonIoTDeviceSink operator connects an SPL graph to the Watson IoT Platform as an IoT 'device': it encodes input tuples as 'events' and sends them to IoT applications. The operator requires a file containing 'device credentials' issued by Watson IoT Platform. The credentials must be specified as shown in the 'Using a configuration file' section of the page at 'https://console.bluemix.net/docs/services/IoT/devices/libraries/java.html'. This operator may be used together with the WatsonIoTDeviceSource operator, which receives 'commands' from IoT devices. If so, the pair must specify the same credentials file, and must be fused into the same Streams PE.</description>
      <metrics/>
      <executionSettings>
        <className>com.ibm.streamsx.watsoniot.device.WatsonIoTDeviceSink</className>
      </executionSettings>
      <libraryDependencies>
        <library>
          <cmn:description>Operator class library</cmn:description>
          <cmn:managedLibrary>
            <cmn:libPath>../../impl/java/bin</cmn:libPath>
            <cmn:libPath>../../opt/*</cmn:libPath>
          </cmn:managedLibrary>
        </library>
      </libraryDependencies>
    </context>
    <parameters>
      <parameter>
        <name>deviceCredentials</name>
        <description>the name of a file containing Watson IoT Platform device credentials</description>
        <optional>false</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>eventData</name>
        <description>an input attribute of type 'rstring' that will be sent to the Watson IoT Platform as event data</description>
        <optional>false</optional>
        <expressionMode>Attribute</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>eventFormat</name>
        <description>an input attribute of type 'rstring' that specifies the format of the data sent to the Watson IoT Platform, defaulting to 'json' if not specified</description>
        <optional>true</optional>
        <expressionMode>Attribute</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>eventName</name>
        <description>an input attribute that will be sent to the Watson IoT Platform as the event name</description>
        <optional>false</optional>
        <expressionMode>Attribute</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>eventQOS</name>
        <description>the 'quality of service' for events sent to the Watson IoT Platform, either '0' or '1' or '2', defaulting to '0' if not specified</description>
        <optional>true</optional>
        <type>int32</type>
        <cardinality>1</cardinality>
      </parameter>
    </parameters>
    <inputPorts>
      <inputPortSet>
        <description>The input port consumes tuples encoded as 'events' and sends them to IoT applications via the Watson IoT Platform. Input tuples must at least include attributes for the event name and event data. By default, the data should be formatted as a JSON-encoded string. Optionally, input tuples may include an attribute for the data format.</description>
        <windowingDescription/>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
        <controlPort>false</controlPort>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </inputPortSet>
    </inputPorts>
    <outputPorts/>
  </javaOperatorModel>
</operatorModel>