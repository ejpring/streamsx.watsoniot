// Copyright (C) 2017  International Business Machines Corporation
// All Rights Reserved

namespace com.ibm.streamsx.watsoniot.sample.application;

use com.ibm.streamsx.json::*;
use com.ibm.streamsx.watsoniot.application::*;

@threading(model=manual)
composite SampleWatsonIoTApplicationSourceAndSink {

  param
    expression<rstring> $applicationCredentials: getSubmissionTimeValue("applicationCredentials"); 
    expression<list<rstring>> $deviceIds: getSubmissionTimeListValue("deviceIds");
    expression<rstring> $deviceType: getSubmissionTimeValue("deviceType");
    expression<float64> $commandInterval: (float64)getSubmissionTimeValue("commandInterval", "10.0" ); // in seconds
    expression<float64> $timeoutInterval: (float64)getSubmissionTimeValue("timeoutInterval", "60.0" ); // in seconds

  type

  EventType = 
    rstring eventName, 
    rstring deviceId, 
    rstring deviceType, 
    rstring jsonString;

  CommandType = 
    rstring commandName, 
    rstring deviceId, 
    rstring deviceType, 
    rstring jsonString;

  graph

    // the analytics stub
  	stream<CommandTupleType> CommandTupleStream = SampleWatsonIoTApplicationAnalytic(EventTupleStream) { 
    param
      deviceIds: $deviceIds;
      deviceType: $deviceType;
      commandName: "sampleCommand";
      commandInterval: $commandInterval; }

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // encode command data as JSON strings for Watson IoT Platform
    stream<CommandType> CommandStream = Custom(CommandTupleStream) {
      logic onTuple CommandTupleStream: {
        for (rstring deviceId in $deviceIds) { 
        submit( { 
              commandName = commandName,
              deviceId = deviceId,
              deviceType = deviceType,
              jsonString = tupleToJSON(commandData) }, CommandStream );
        } } }
  	() as CommandConsole = Custom(CommandStream as In) { logic onTuple In: { printStringLn(">>>>> sent command: " + (rstring)CommandStream); } }

    // send encoded commands to Watson IoT Platform 
    () as CommandSink = WatsonIoTApplicationSink(CommandStream) {
      param
      commandName: commandName;
      commandDeviceType: deviceType;
      commandDeviceId: deviceId;
      commandData: jsonString;
      applicationCredentials: $applicationCredentials; }

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // receive encoded events from Watson IoT Platform
    stream<EventType> EventStream = WatsonIoTApplicationSource() {
      param
      subscriptionDeviceTypes: $deviceType;
      subscriptionFormats: "json";
      eventName: "eventName";
      eventDeviceType: "deviceType";
      eventDeviceId: "deviceId";
      eventData: "jsonString";
      applicationCredentials: $applicationCredentials; }
  	() as EventConsole = Custom(EventStream as In) { logic onTuple In: { printStringLn("<<<<< received event: " + (rstring)EventStream); } }

    // decode JSON strings received from Watson IoT Platform into event data
    stream<EventTupleType> EventTupleStream = JSONToTuple(EventStream) {
    param
    inputAttribute: jsonString; 
    targetAttribute: "eventData"; }       

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    () as Timeout = Custom() { logic onProcess: { block($timeoutInterval); shutdownPE(); } }

}
