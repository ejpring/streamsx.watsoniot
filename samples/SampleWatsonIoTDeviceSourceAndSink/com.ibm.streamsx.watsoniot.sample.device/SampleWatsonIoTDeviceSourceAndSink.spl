// Copyright (C) 2017  International Business Machines Corporation
// All Rights Reserved

namespace com.ibm.streamsx.watsoniot.sample.device;

use com.ibm.streamsx.json::*;
use com.ibm.streamsx.watsoniot.device::*;

@threading(model=manual)
composite SampleWatsonIoTDeviceSourceAndSink {

  param
    expression<rstring> $deviceCredentials: getSubmissionTimeValue("deviceCredentials"); 
    expression<float64> $eventInterval: (float64)getSubmissionTimeValue("eventInterval", "1.0"); // in seconds
    expression<float64> $timeoutInterval: (float64)getSubmissionTimeValue("timeoutInterval", "60.0" ); // in seconds

  type

  EventTupleType =
    rstring aString,
    uint64 anInteger,
    float64 aFloat,
    list<float64> aList,
    map<rstring,int32> aMap;

  CommandTupleType =
    rstring aString,
    uint64 anInteger,
    float64 aFloat;

  graph

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

     // generate sample events
    stream<EventTupleType> EventTupleStream = Beacon() {
      param period: $eventInterval;
      output EventTupleStream: 
        aString = "this is sample event number " + (rstring)IterationCount(),
        anInteger = IterationCount(),
        aFloat = getTimestampInSecs(),
        aList = [ 1.41421, 2.71828, 3.14159 ],
        aMap = { "one": 1, "two": 2, "three": 3, "many": 2147483647 }; }
  	() as EventTupleConsole = Custom(EventTupleStream as In) { logic onTuple In: { printStringLn("event tuple: " + (rstring)EventTupleStream); } }

    // encode tuples into events for Watson IoT Platform
    stream<rstring eventName, rstring jsonString> DeviceEventStream = Functor(EventTupleStream) {
      output DeviceEventStream: 
        eventName = "sampleEvent",
        jsonString = tupleToJSON(EventTupleStream); } 
  	() as DeviceEventConsole = Custom(DeviceEventStream as In) { logic onTuple In: { printStringLn(">>>>> sending device event: " + (rstring)DeviceEventStream); } }

    // send events to Watson IoT Platform
    () as DeviceEventSink = WatsonIoTDeviceSink(DeviceEventStream) {
      param
      eventName: eventName;
      eventData: jsonString;
      deviceCredentials: $deviceCredentials; }

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // receive commands from Watson IoT Platform
    stream<rstring commandName, rstring jsonString> ApplicationCommandStream = WatsonIoTDeviceSource() {
      param
      commandName: "commandName";
      commandData: "jsonString";
      deviceCredentials: $deviceCredentials; }
  	() as ApplicationCommandConsole = Custom(ApplicationCommandStream as In) { logic onTuple In: { printStringLn("<<<<< received application command: " + (rstring)ApplicationCommandStream); } }

    // decode commands received from Watson IoT Platform into tuples
    stream<rstring commandName, CommandTupleType commandData> CommandTupleStream = JSONToTuple(ApplicationCommandStream) {
    param
    inputAttribute: jsonString; 
    targetAttribute: "commandData"; }       
  	() as CommandTupleConsole = Custom(CommandTupleStream as In) { logic onTuple In: { printStringLn("command tuple: " + (rstring)CommandTupleStream); } }

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    () as Timeout = Custom() { logic onProcess: { block($timeoutInterval); shutdownPE(); } }

}
