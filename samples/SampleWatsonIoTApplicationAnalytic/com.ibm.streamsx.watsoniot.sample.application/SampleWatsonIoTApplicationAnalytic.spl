// Copyright (C) 2017  International Business Machines Corporation
// All Rights Reserved

namespace com.ibm.streamsx.watsoniot.sample.application;

type EventDataType =
  rstring aString,
  uint64 anInteger,
  float64 aFloat,
  list<float64> aList,
  map<rstring,int32> aMap;

type EventTupleType = 
  rstring eventName, 
  rstring deviceId, 
  rstring deviceType, 
  EventDataType eventData;

type CommandDataType =
  rstring aString,
  uint64 anInteger,
  float64 aFloat;

type CommandTupleType = 
  rstring commandName, 
  rstring deviceId, 
  rstring deviceType, 
  CommandDataType commandData;

composite SampleWatsonIoTApplicationAnalytic ( input stream<EventTupleType> EventTupleStream ; output stream<CommandTupleType> CommandTupleStream ) {

  param
    expression<rstring> $commandName;
    expression<float64> $commandInterval;
    expression<float64> $deviceInterval;
    
  type
      
    Device = 
      rstring d,
      rstring t;

  graph

    stream<CommandDataType> CommandDataStream = Beacon() {
      param period: $commandInterval;
      output CommandDataStream: 
          aString = "this is sample command number " + (rstring)IterationCount(),
          anInteger = IterationCount(),
          aFloat = getTimestampInSecs(); }

    stream<CommandTupleType> CommandTupleStream = Custom(EventTupleStream; CommandDataStream) {
      logic state: { mutable map<Device,float64> devices = {}; }
      onTuple EventTupleStream: { 
        float64 now = getTimestampInSecs();
        Device device = { d=deviceId, t=deviceType };
        if ( ! ( device in devices ) ) {
          printStringLn("***** remembering device " + device.d + " of type " + device.t);
          insertM(devices, device, now);
          return; }
        devices[device] = now; }
      onTuple CommandDataStream: {
        float64 now = getTimestampInSecs();
        for (Device device in keys(devices)) {
          if ( devices[device] < now - $deviceInterval ) { 
            printStringLn("***** forgetting device " + device.d + " of type " + device.t);
            removeM(devices, device); 
            return; }
          submit( { commandName = $commandName, deviceId = device.d, deviceType = device.t, commandData = CommandDataStream }, CommandTupleStream );
        } } } 

}
