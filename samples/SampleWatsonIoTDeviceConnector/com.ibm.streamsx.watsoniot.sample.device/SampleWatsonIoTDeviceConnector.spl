// Copyright (C) 2017  International Business Machines Corporation
// All Rights Reserved

namespace com.ibm.streamsx.watsoniot.sample.device;

use com.ibm.streamsx.json::*;
use com.ibm.streamsx.watsoniot.device::*;

@threading(model=manual)
composite SampleWatsonIoTDeviceConnector {

  param
    expression<rstring> $deviceCredentials: getSubmissionTimeValue("deviceCredentials"); 
    expression<float64> $eventInterval: (float64)getSubmissionTimeValue("eventInterval", "1.0" ); // in seconds
    expression<float64> $timeoutInterval: (float64)getSubmissionTimeValue("timeoutInterval", "60.0" ); // in seconds

  type

  EventType = 
    rstring eventName, 
    rstring jsonString;

  CommandType = 
    rstring commandName, 
    rstring deviceId, 
    rstring deviceType, 
    rstring jsonString;

  graph

    // the analytics stub
    stream<EventTupleType> EventTupleStream = SampleWatsonIoTDeviceAnalytic(CommandTupleStream) {
      param 
        eventName: "sampleEvent";
        eventInterval: $eventInterval; }

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // encode tuples into events for Watson IoT Platform
    stream<EventType> EventStream = Functor(EventTupleStream) {
      output EventStream: 
        jsonString = tupleToJSON(EventTupleStream); } 
  	() as EventConsole = Custom(EventStream as In) { logic onTuple In: { printStringLn(">>>>> sent event: " + (rstring)EventStream); } }

    // send events to Watson IoT Platform and receive commands from it
    stream<CommandType> CommandStream = WatsonIoTDeviceConnector(EventStream) {
      param
      eventName: eventName;
      eventData: jsonString;
      commandName: "commandName";
      //???????????deviceId: "deviceId";
      //???????????????deviceType: "deviceType";
      commandData: "jsonString";
      deviceCredentials: $deviceCredentials; }
  	() as CommandConsole = Custom(CommandStream as In) { logic onTuple In: { printStringLn("<<<<< received command: " + (rstring)CommandStream); } }

    // decode commands received from Watson IoT Platform into tuples
    stream<CommandTupleType> CommandTupleStream = JSONToTuple(CommandStream) {
    param
    inputAttribute: jsonString; 
    targetAttribute: "commandData"; }       

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    () as Timeout = Custom() { logic onProcess: { block($timeoutInterval); shutdownPE(); } }

}
